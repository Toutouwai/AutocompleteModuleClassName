<?php namespace ProcessWire;

/**
 *
 * Autocomplete Module Class Name
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AutocompleteModuleClassName extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Autocomplete Module Class Name',
			'summary' => 'Provides autocomplete suggestions for the "Add Module From Directory" field.',
			'version' => '0.1.5',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/AutocompleteModuleClassName',
			'icon' => 'angle-double-right',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.16',
		);
	}

	/**
	 * Construct
	 */
	public function __construct() {
		parent::__construct();
		$this->options_type = 'directory_list';
		$this->use_fuzzy = 1;
		$this->awesomplete_options = "autoFirst: true,\nmaxItems: 15";
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('ProcessModule::execute', $this, 'beforeProcessModuleExecute');
		$this->addHookAfter('ProcessModule::execute', $this, 'afterProcessModuleExecute');
		$this->addHookBefore('Modules::saveConfig', $this, 'beforeSaveConfig');
	}

	/**
	 * Before ProcessModule::execute
	 *
	 * @param HookEvent $event
	 */
	protected function beforeProcessModuleExecute(HookEvent $event) {
		// Return early if this is not the module listing
		if($this->wire()->input->post->count()) return;
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];

		// Hook module class name field render
		$this->addHookBefore('InputfieldName::render', function(HookEvent $event) {
			/** @var InputfieldSubmit $inputfield */
			$inputfield = $event->object;
			if($inputfield->name !== 'download_name') return;
			$url = $this->wire()->config->urls->admin . 'module/edit?name=AutocompleteModuleClassName&get_directory_modules=1&return=1';
			$inputfield->appendMarkup = "<p class='notes' style='background-color:transparent;'>AutocompleteModuleClassName: <a href='$url' title='" . $this->_('This will take 30-60 seconds') . "'><i class='fa fa-fw fa-refresh' style='margin-right:3px;'></i>" . $this->_('Refresh modules directory list') . '</a></p>';
		});

		// Add list JS files
		if($this->options_type === 'custom_list') {
			$basename = 'custom_list.js';
		} else {
			$basename = 'directory_list.js';
		}
		$filename = $config->paths->$this . $basename;
		if(is_file($filename)) {
			$modified = filemtime($filename);
			$config->scripts->add($config->urls->$this . "{$basename}?v={$modified}");
		}
		if($this->url_list) {
			$filename = $config->paths->$this . 'url_list.js';
			if(is_file($filename)) {
				$modified = filemtime($filename);
				$config->scripts->add($config->urls->$this . "url_list.js?v={$modified}");
			}
		}

		// Add Awesomplete files
		$config->styles->add($config->urls->$this . "awesomplete/awesomplete.css?v={$version}");
		$config->scripts->add($config->urls->$this . "awesomplete/awesomplete.min.js?v={$version}");
		$config->scripts->add($config->urls->$this . "awesomplete/fuzzy.js?v={$version}");
	}

	/**
	 * After ProcessModule::execute
	 *
	 * @param HookEvent $event
	 */
	protected function afterProcessModuleExecute(HookEvent $event) {
		// Return early if this is not the module listing
		if($this->wire()->input->post->count()) return;
		$script = $this->buildAwesompleteInit('amcn_list', 'download_name');
		if($this->url_list) $script .= $this->buildAwesompleteInit('amcn_url_list', 'download_zip_url');
		$event->return .= "<script>$script</script>";
	}

	/**
	 * Before Modules::saveConfig
	 *
	 * @param HookEvent $event
	 */
	protected function beforeSaveConfig(HookEvent $event) {
		if($event->arguments(0) != $this) return;
		$data = $event->arguments(1);
		$old_data = $this->wire()->modules->getConfig($this);
		// Create JS file if any list changed
		$list_types = array('directory_list', 'custom_list', 'url_list');
		foreach($list_types as $list_type) {
			$old_list = isset($old_data[$list_type]) ? $old_data[$list_type] : '';
			if($data[$list_type] !== $old_list) {
				$this->$list_type = $data[$list_type];
				$this->createJsFile($list_type);
			}
		}
	}

	/**
	 * Build code for Awesomplete initialisation
	 *
	 * @param string $list_var_name
	 * @param string $input_id
	 * @return string
	 */
	protected function buildAwesompleteInit($list_var_name, $input_id) {
		$options = "list: $list_var_name, ";
		if($this->use_fuzzy) $options .= "filter: amcn_filter, item: amcn_item, ";
		$options .= $this->awesomplete_options;
		$options = '{' . $options . '}';
		return "new Awesomplete(document.getElementById('$input_id'), $options);";
	}

	/**
	 * Get class names from modules directory
	 *
	 * @param string $base_url
	 * @param array $module_names
	 * @return array
	 */
	public function getDirectoryModuleNames($base_url = '', $module_names = array()) {
		$key = $this->wire()->config->moduleServiceKey;
		$http = new WireHttp();
		$http->setTimeout(30);
		// If not a recursive call to the method...
		if(!$base_url) {
			// Set base url to default
			$base_url = $this->wire()->config->moduleServiceURL;
			// Get module class names to exclude
			$exclude_names = $this->getDirectoryExcludeNames('language-pack');
			$exclude_names = $this->getDirectoryExcludeNames('language-pack', $exclude_names);
		} else {
			$exclude_names = array();
		}
		$data = $http->getJSON("{$base_url}?apikey={$key}&sort=class_name&limit=400&field=class_name");
		foreach($data['items'] as $item) {
			if($item['class_name']) $module_names[] = $item['class_name'];
		}
		if($data['pageNum'] < $data['pageTotal']) {
			$module_names = $this->getDirectoryModuleNames($data['next_pagination_url'], $module_names);
		}
		return array_diff($module_names, $exclude_names);
	}

	/**
	 * Get class names from modules directory to exclude
	 *
	 * @param string $category
	 * @param array $exclude_names
	 * @return array
	 */
	public function getDirectoryExcludeNames($category, $exclude_names = array()) {
		$key = $this->wire()->config->moduleServiceKey;
		$base_url = $this->wire()->config->moduleServiceURL;
		$http = new WireHttp();
		$http->setTimeout(30);
		$exclude_data = $http->getJSON("{$base_url}?apikey={$key}&limit=400&field=class_name&category={$category}");
		foreach($exclude_data['items'] as $item) {
			if($item['class_name']) $exclude_names[] = $item['class_name'];
		}
		return $exclude_names;
	}

	/**
	 * Create a JS file for autocomplete options
	 *
	 * @param $options_type
	 * @return int|bool
	 */
	protected function createJsFile($list_type) {
		if(!isset($this->$list_type)) return false;
		$raw_list = $this->$list_type;
		$list_var_name = 'amcn_list';
		$list_items = explode("\n", str_replace("\r", "", $raw_list));
		if($list_type === 'url_list') {
			$list_var_name = 'amcn_url_list';
			foreach($list_items as $key => $value) {
				if(strpos($value, '>') === false) {
					unset($list_items[$key]);
				} else {
					$pieces = array_map('trim', explode('>', $value, 2));
					$list_items[$key] = "{ label: \"$pieces[0]\", value: \"$pieces[1]\" }";
				}
			}
			$contents = implode(',', $list_items);
		} else {
			$contents = '"' . implode('","', $list_items) . '"';
		}
		$contents = "var $list_var_name = [{$contents}];";
		$filename = $this->wire()->config->paths->$this . $list_type . '.js';
		return file_put_contents($filename, $contents);
	}

	/**
	 * Count lines of text
	 *
	 * @param $str
	 * @return int
	 */
	protected function countLines($str) {
		if(!$str) return 0;
		$str = str_replace("\r", "", $str);
		return substr_count($str, "\n") + 1;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$modules = $this->wire()->modules;
		$input = $this->wire()->input;
		$session = $this->wire()->session;

		// Look for input variable in GET and POST
		$get_directory_modules = $input->get_directory_modules;
		if($get_directory_modules) {
			$module_names = $this->getDirectoryModuleNames();
			$module_names_str = implode("\n", $module_names);
			$modules->saveConfig($this, 'directory_list', $module_names_str);
			$this->directory_list = $module_names_str;
			$this->createJsFile('directory_list');
			$this->wire()->session->message('AutocompleteModuleClassName: ' . $this->_('Refreshed modules directory list'));
			if($input->get('return')) {
				$session->redirect($this->wire()->config->urls->admin . 'module/?install#tab_new_modules');
			} else {
				$session->redirect($input->url(true));
			}
		}

		/* @var InputfieldFieldset $fs1 */
		$fs1 = $modules->InputfieldFieldset;
		$fs1->label = $this->_('Autocomplete for "Add Module From Directory"');
		$inputfields->add($fs1);

		/* @var InputfieldRadios $f */
		$f = $modules->InputfieldRadios;
		$f_name = 'options_type';
		$f->name = $f_name;
		$f->label = $this->_('Suggestions list type');
		$f->addOption('directory_list', $this->_('Module class names from directory'));
		$f->addOption('custom_list', $this->_('Custom list of module class names'));
		$f->value = $this->$f_name;
		$f->optionColumns = 1;
		$fs1->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'directory_list';
		$f->name = $f_name;
		$f->label = $this->_('List of class names in modules directory');
		$f->description = $this->_('This list of class names does not update automatically. Use the button below when you want to retrieve a new list from the modules directory.');
		$f->notes = $this->countLines($this->$f_name) . ' ' . $this->_('class names');
		$f->value = $this->$f_name;
		$f->rows = 10;
		$f->addClass('noAutosize');
		$f->showIf = 'options_type=directory_list';
		$fs1->add($f);

		/* @var InputfieldButton $f */
		$b = $modules->InputfieldButton;
		$b->name = 'get_directory_modules';
		$b->value = $this->_('Get class names from modules directory');
		$b->icon = 'refresh';
		$b->type = 'submit';

		/* @var InputfieldMarkup $f */
		$f = $modules->InputfieldMarkup;
		$f->label = $this->_('Refresh modules directory list');
		$f->value = $b->render();
		$f->showIf = 'options_type=directory_list';
		$fs1->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'custom_list';
		$f->name = $f_name;
		$f->label = $this->_('Custom list of module class names');
		$f->notes = $this->countLines($this->$f_name) . ' ' . $this->_('class names');
		$f->value = $this->$f_name;
		$f->rows = 10;
		$f->addClass('noAutosize');
		$f->showIf = 'options_type=custom_list';
		$fs1->add($f);

		/* @var InputfieldFieldset $fs2 */
		$fs2 = $modules->InputfieldFieldset;
		$fs2->label = $this->_('Autocomplete for "Add Module From URL"');
		$inputfields->add($fs2);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'url_list';
		$f->name = $f_name;
		$f->label = $this->_('Modules URL list');
		$f->description = $this->_('Enter items in the format [autocomplete suggestion] > [module ZIP url]. Example: RepeaterImages > https://github.com/Toutouwai/RepeaterImages/archive/master.zip');
		$f->notes = $this->countLines($this->$f_name) . ' ' . $this->_('module urls');
		$f->value = $this->$f_name;
		$f->rows = 10;
		$f->addClass('noAutosize');
		$fs2->add($f);

		/* @var InputfieldCheckbox $f */
		$f = $modules->InputfieldCheckbox;
		$f_name = 'use_fuzzy';
		$f->name = $f_name;
		$f->label = $this->_('Use fuzzy search in autocomplete');
		$f->notes = $this->_('When activated, the characters you type just have to exist in the autocomplete suggestion item and occur after preceding matches but do not need to be contiguous.');
		$f->attr('checked', $this->$f_name === 1 ? 'checked' : '');
		$inputfields->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'awesomplete_options';
		$f->name = $f_name;
		$f->label = $this->_('Awesomplete options');
		$f->description = sprintf($this->_('Code entered here gets inserted into the Awesomplete initialisation. See the [Awesomplete documentation](%s) for more information.'), 'https://leaverou.github.io/awesomplete/');
		$f->notes = $this->_('If the fuzzy search option is enabled above then you should not change the Awesomplete "filter" or "item" options.');
		$f->value = $this->$f_name;
		$f->rows = 3;
		$inputfields->add($f);
	}

	/**
	 * Install
	 */
	public function ___install() {
		// Get directory module class names on install
		$module_names = $this->getDirectoryModuleNames();
		$module_names_str = implode("\n", $module_names);
		$this->wire()->modules->saveConfig($this, 'directory_list', $module_names_str);
		$this->directory_list = $module_names_str;
		$this->createJsFile('directory_list');
	}

	/**
	 * Uninstall
	 */
	public function ___uninstall() {
		// Delete list files
		$list_types = array('directory_list', 'custom_list', 'url_list');
		foreach($list_types as $list_type) {
			$filename = $this->wire()->config->paths->$this . "$list_type.js";
			if(is_file($filename)) unlink($filename);
		}
	}

}
