<?php namespace ProcessWire;

/**
 *
 * Autocomplete Module Class Name
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AutocompleteModuleClassName extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Autocomplete Module Class Name',
			'summary' => 'Provides autocomplete suggestions for the "Add Module From Directory" field.',
			'version' => '0.1.0',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/AutocompleteModuleClassName',
			'icon' => 'angle-double-right',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.16',
		);
	}

	/**
	 * Construct
	 */
	public function __construct() {
		parent::__construct();
		$this->options_type = 'directory_list';
		$this->use_fuzzy = 1;
		$this->awesomplete_options = "autoFirst: true,\nmaxItems: 15";
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookBefore('ProcessModule::execute', $this, 'beforeProcessModuleExecute');
		$this->addHookBefore('Modules::saveConfig', $this, 'beforeSaveConfig');
	}

	/**
	 * Before ProcessModule::execute
	 *
	 * @param HookEvent $event
	 */
	protected function beforeProcessModuleExecute(HookEvent $event) {
		$config = $this->wire('config');
		$info = $this->getModuleInfo();
		$version = $info['version'];
		if($this->options_type === 'custom_list') {
			$basename = 'custom_list.js';
		} else {
			$basename = 'directory_list.js';
		}
		$filename = $config->paths->$this . $basename;
		if(!is_file($filename)) return;
		$modified = filemtime($filename);
		$config->styles->add($config->urls->$this . "awesomplete/awesomplete.css?v={$version}");
		$config->scripts->add($config->urls->$this . "{$basename}?v={$modified}");
		$config->scripts->add($config->urls->$this . "awesomplete/awesomplete.min.js?v={$version}");
		$config->scripts->add($config->urls->$this . "awesomplete/fuzzy.js?v={$version}");
		// Hook download_name field render
		$event->wire()->addHookAfter('InputfieldName::render', $this, 'modifyDownloadField');
	}

	/**
	 * Add JS to download_name field
	 *
	 * @param HookEvent $event
	 */
	protected function modifyDownloadField(HookEvent $event) {
		$inputfield = $event->object;
		if($inputfield->name !== 'download_name') return;
		$options = "list: amcn_list, ";
		if($this->use_fuzzy) $options .= "filter: amcn_filter, item: amcn_item, ";
		$options .= $this->awesomplete_options;
		$options = '{' . $options . '}';
		$event->return .= "<script>new Awesomplete(document.getElementById('download_name'), $options);</script>";
	}

	/**
	 * After Modules::saveConfig
	 *
	 * @param HookEvent $event
	 */
	protected function beforeSaveConfig(HookEvent $event) {
		if($event->arguments(0) != $this) return;
		$data = $event->arguments(1);
		$old_data = $this->wire('modules')->getConfig($this);
		$old_directory_list = isset($old_data['directory_list']) ? $old_data['directory_list'] : '';
		$old_custom_list = isset($old_data['custom_list']) ? $old_data['custom_list'] : '';
		// Create JS file if either list changed
		if($data['directory_list'] !== $old_directory_list) {
			$this->directory_list = $data['directory_list'];
			$this->createJsFile('directory_list');
		}
		if($data['custom_list'] !== $old_custom_list) {
			$this->custom_list = $data['custom_list'];
			$this->createJsFile('custom_list');
		}
	}

	/**
	 * Get class names from modules directory
	 *
	 * @param string $base_url
	 * @param array $module_names
	 * @return array
	 */
	public function getDirectoryModuleNames($base_url = '', $module_names = array()) {
		$key = $this->wire('config')->moduleServiceKey;
		$http = new WireHttp();
		$http->setTimeout(30);
		// If not a recursive call to the method...
		if(!$base_url) {
			// Set base url to default
			$base_url = $this->wire('config')->moduleServiceURL;
			// Get module class names to exclude
			$exclude_names = $this->getDirectoryExcludeNames('language-pack');
			$exclude_names = $this->getDirectoryExcludeNames('language-pack', $exclude_names);
		} else {
			$exclude_names = array();
		}
		$data = $http->getJSON("{$base_url}?apikey={$key}&sort=class_name&limit=400&field=class_name");
		foreach($data['items'] as $item) {
			if($item['class_name']) $module_names[] = $item['class_name'];
		}
		if($data['pageNum'] < $data['pageTotal']) {
			$module_names = $this->getDirectoryModuleNames($data['next_pagination_url'], $module_names);
		}
		return array_diff($module_names, $exclude_names);
	}

	/**
	 * Get class names from modules directory to exclude
	 *
	 * @param string $category
	 * @param array $exclude_names
	 * @return array
	 */
	public function getDirectoryExcludeNames($category, $exclude_names = array()) {
		$key = $this->wire('config')->moduleServiceKey;
		$base_url = $this->wire('config')->moduleServiceURL;
		$http = new WireHttp();
		$http->setTimeout(30);
		$exclude_data = $http->getJSON("{$base_url}?apikey={$key}&limit=400&field=class_name&category={$category}");
		foreach($exclude_data['items'] as $item) {
			if($item['class_name']) $exclude_names[] = $item['class_name'];
		}
		return $exclude_names;
	}

	/**
	 * Create a JS file for autocomplete options
	 *
	 * @param $options_type
	 * @return int|bool
	 */
	protected function createJsFile($options_type) {
		$raw_options = $options_type === 'custom_list' ? $this->custom_list : $this->directory_list;
		$contents = str_replace("\r", "", $raw_options);
		$contents = '"' . str_replace("\n", '","', $contents) . '"';
		$contents = "var amcn_list = [{$contents}];";
		$filename = $this->wire('config')->paths->$this . $options_type . '.js';
		return $this->wire('files')->filePutContents($filename, $contents);
	}

	/**
	 * Count lines of text
	 *
	 * @param $str
	 * @return int
	 */
	protected function countLines($str) {
		if(!$str) return 0;
		$str = str_replace("\r", "", $str);
		return substr_count($str, "\n") + 1;
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$modules = $this->wire('modules');

		if($this->wire('input')->post->get_directory_modules) {
			$module_names = $this->getDirectoryModuleNames();
			$module_names_str = implode("\n", $module_names);
			$modules->saveConfig($this, 'directory_list', $module_names_str);
			$this->createJsFile('directory_list');
			$this->wire('session')->redirect($this->wire('input')->url(true));
		}

		/* @var InputfieldRadios $f */
		$f = $modules->InputfieldRadios;
		$f_name = 'options_type';
		$f->name = $f_name;
		$f->label = $this->_('Autocomplete options list');
		$f->addOption('directory_list', $this->_('Module class names from directory'));
		$f->addOption('custom_list', $this->_('Custom list of module class names'));
		$f->value = $this->$f_name;
		$f->optionColumns = 1;
		$inputfields->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'directory_list';
		$f->name = $f_name;
		$f->label = $this->_('List of class names in modules directory');
		$f->description = $this->_('This list of class names does not update automatically. Use the button below when you want to retrieve a new list from the modules directory.');
		$f->notes = $this->countLines($this->$f_name) . ' ' . $this->_('class names');
		$f->value = $this->$f_name;
		$f->rows = 10;
		$f->addClass('noAutosize');
		$f->showIf = 'options_type=directory_list';
		$inputfields->add($f);

		/* @var InputfieldButton $f */
		$b = $modules->InputfieldButton;
		$b->name = 'get_directory_modules';
		$b->value = $this->_('Get class names from modules directory');
		$b->type = 'submit';

		/* @var InputfieldMarkup $f */
		$f = $modules->InputfieldMarkup;
		$f->label = $this->_('Update modules directory class name list');
		$f->value = $b->render();
		$f->showIf = 'options_type=directory_list';
		$inputfields->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'custom_list';
		$f->name = $f_name;
		$f->label = $this->_('Custom list of module class names');
		$f->notes = $this->countLines($this->$f_name) . ' ' . $this->_('class names');
		$f->value = $this->$f_name;
		$f->rows = 10;
		$f->addClass('noAutosize');
		$f->showIf = 'options_type=custom_list';
		$inputfields->add($f);

		/* @var InputfieldCheckbox $f */
		$f = $modules->InputfieldCheckbox;
		$f_name = 'use_fuzzy';
		$f->name = $f_name;
		$f->label = $this->_('Use fuzzy search in autocomplete');
		$f->notes = $this->_('When activated, the characters you type just have to exist in the module class name and occur after preceding matches but do not need to be contiguous.');
		$f->attr('checked', $this->$f_name === 1 ? 'checked' : '');
		$inputfields->add($f);

		/* @var InputfieldTextarea $f */
		$f = $modules->InputfieldTextarea;
		$f_name = 'awesomplete_options';
		$f->name = $f_name;
		$f->label = $this->_('Awesomplete options');
		$f->description = sprintf($this->_('Code entered here gets inserted into the Awesomplete initialisation. See the [Awesomplete documentation](%s) for more information.'), 'https://leaverou.github.io/awesomplete/');
		$f->notes = $this->_('If the fuzzy search option is enabled above then you should not change the Awesomplete "filter" or "item" options.');
		$f->value = $this->$f_name;
		$f->rows = 3;
		$inputfields->add($f);
	}

	/**
	 * Install
	 */
	public function ___install() {
		// Get directory module class names on install
		$module_names = $this->getDirectoryModuleNames();
		$module_names_str = implode("\n", $module_names);
		$this->wire('modules')->saveConfig($this, 'directory_list', $module_names_str);
		$this->directory_list = $module_names_str;
		$this->createJsFile('directory_list');
	}

	/**
	 * Uninstall
	 */
	public function ___uninstall() {
		// Delete list files
		$config = $this->wire('config');
		$filename = $config->paths->$this . 'directory_list.js';
		if(is_file($filename)) unlink($filename);
		$filename = $config->paths->$this . 'custom_list.js';
		if(is_file($filename)) unlink($filename);
	}

}
